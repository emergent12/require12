Practical 2  - Linear Regression


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('temperatures 2.csv')

df.head()


x = df['YEAR']
y = df['ANNUAL']

plt.title('Temperature Plot of INDIA')
plt.xlabel('Year')
plt.ylabel('Annual Average Temperature')
plt.scatter(x,y)

x.shape

x = x.values

x = x.reshape(117,1)
x

x.shape

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x , y)

regressor.coef_

regressor.intercept_

regressor.predict([[2035]])

regressor.predict([[2055]])

regressor.predict([[2075]])

regressor.predict([[2099]])

predicted = regressor.predict(x)

predicted

y

import numpy as np

np.mean(abs(y - predicted))

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y,predicted)

from sklearn.metrics import mean_squared_error
mean_squared_error(y,predicted)

np.mean(abs(y - predicted)**2)

from sklearn.metrics import r2_score
r2_score(y,predicted)

regressor.score(x,y)

plt.title('Temperature Plot of INDIA')
plt.xlabel('Year')
plt.ylabel('Annual Average Temperature')
plt.scatter(x,y,label ='actual',color='red',marker='.')
plt.plot(x,predicted,label ='predicted',color='g')

sns.regplot(x='YEAR',y='ANNUAL',data=df,marker ='.',color='red')

****************************************************************************************************

Practical 3 - Logistic Regression



import pandas as pd
import seaborn as sns

df=sns.load_dataset('iris')

df.head()

df.tail()

df.info()

from sklearn.preprocessing import LabelEncoder
label=LabelEncoder()
df['species']=label.fit_transform(df['species'])

df['species'].unique()

df['species'].nunique()

x=df.drop(['species'],axis=1)
y=df['species']

print(x)
print(y)

from sklearn.model_selection import train_test_split

xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.2,random_state=0)


print(xtrain.shape)
print(xtest.shape)
print(ytrain.shape)
print(ytest.shape)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
xtrain=sc.fit_transform(xtrain)
xtest=sc.fit_transform(xtest)


from sklearn.linear_model import LogisticRegression
reg=LogisticRegression()
reg.fit(xtrain,ytrain)

y_predict=reg.predict(xtest)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(ytest,y_predict)
print(cm)

rom sklearn.metrics import classification_report
cr=classification_report(ytest,y_predict)
print(cr)

from sklearn.metrics import accuracy_score
print('Accuracy Score: ',accuracy_score(ytest,y_predict))


